cmake_minimum_required(VERSION 3.5)

project(Effects LANGUAGES CXX VERSION 0.0.0.1)

include(GNUInstallDirs)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}")

set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if (CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_CXX_FLAGS "-Wall -Wextra -pedantic")
endif()

list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

option(BUILD_SHARED_LIBS "Build libraries as shared or static" ON)

if(NOT CMAKE_CONFIGURATION_TYPES)
    if(NOT CMAKE_BUILD_TYPE)
        message(STATUS "Setting build type to 'Release'.")
        set_property(CACHE CMAKE_BUILD_TYPE PROPERTY VALUE "Release")
    endif()
endif()


# List of CPP (source) library files.
set(${PROJECT_NAME}_COMMON_HDR
    src/VisualizationTechnique.h
)

set(${PROJECT_NAME}_GEOMETRY_SRC 
    src/geometry/Line.cpp
    src/geometry/Sphere.cpp
)

# List of HPP (header) library files.
set(${PROJECT_NAME}_GEOMETRY_HDR
    src/geometry/Line.h
    src/geometry/Sphere.h
    src/geometry/SphereFactory.h
)

set(${PROJECT_NAME}_LASER_SRC
    src/laser/Laser.cpp
    src/laser/LaserVT.cpp
)

set(${PROJECT_NAME}_LASER_HDR
    src/laser/Laser.h
    src/laser/LaserVT.h
)


set(${PROJECT_NAME}_HEADERS 
    ${${PROJECT_NAME}_GEOMETRY_HDR} 
    ${${PROJECT_NAME}_LASER_HDR} 
    ${${PROJECT_NAME}_COMMON_HDR}
)

set(${PROJECT_NAME}_SOURCES 
    ${${PROJECT_NAME}_GEOMETRY_SRC} 
    ${${PROJECT_NAME}_LASER_SRC}
)

find_package(GPUEngine REQUIRED COMPONENT geGL geSG)
find_package(glm REQUIRED)

# You can add an external dependency using the find_package() function call
# See: https://cmake.org/cmake/help/latest/command/find_package.html
# Note that the imported objects resulting from the find_package() depends upon
# the configuration files generated by the developer of the library.
# These imported objects can be either:
#  - variables that must be used to include directories and/or link libraries
#    with function calls like target_include_directories() and/or
#    target_link_libraries();
#  - a CMake target that must only be linked using target_link_libraries() and
#    CMake will take care of including and/or linking the appropriate
#    directories and/or libraries.
# See: https://cmake.org/cmake/help/latest/command/target_include_directories.html
# See: https://cmake.org/cmake/help/latest/command/target_link_libraries.html
# For example:
# find_package(FooPackage) may import either
#  - variables: FooPackage_INCLUDE_DIRS and FooPackage_LIBRARIES
#  - target: FooPackage::FooPackage

# Adds a library target called ${LIBRARY_TARGET_NAME} to be built from the
# source and header files listed in the command invocation.
add_library(${PROJECT_NAME} ${${PROJECT_NAME}_SOURCES} ${${PROJECT_NAME}_HEADERS})

# Set two minimum target properties for the library.
# See https://cmake.org/cmake/help/latest/command/set_target_properties.html
# Properties are: 1) Library version number 2) list of corresponding public headers
set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${${PROJECT_NAME}_VERSION})

# Specify include directories for both compilation and installation process.
# The $<INSTALL_PREFIX> generator expression is useful to ensure to create 
# relocatable configuration files, see https://cmake.org/cmake/help/latest/manual/cmake-packages.7.html#creating-relocatable-packages
target_include_directories(${PROJECT_NAME} PUBLIC 
    "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>"
    "$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>"
)

# If you used find_package() you need to use target_include_directories() and/or
# target_link_libraries(). As explained previously, depending on the imported
# objects, you may need to call either or both:
# - with imported variable:
#   target_include_directories(${LIBRARY_TARGET_NAME} ${FooPackage_INCLUDE_DIRS})
#   target_link_libraries(${LIBRARY_TARGET_NAME} ${FooPackage_LIBRARIES})
# - with imported target:
#   target_link_libraries(${LIBRARY_TARGET_NAME} FooPackage_LIBRARIES::FooPackage_LIBRARIES)

# Specify installation targets, typology and destination folders.
install(FILES ${${PROJECT_NAME}_GEOMETRY_HDR} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/geometry)
install(FILES ${${PROJECT_NAME}_COMMON_HDR} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME})
install(FILES ${${PROJECT_NAME}_LASER_HDR}    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/laser)

install(TARGETS ${PROJECT_NAME} EXPORT  ${PROJECT_NAME}Targets
        LIBRARY       DESTINATION ${CMAKE_INSTALL_LIBDIR}                            
        ARCHIVE       DESTINATION ${CMAKE_INSTALL_LIBDIR}                            
        RUNTIME       DESTINATION ${CMAKE_INSTALL_BINDIR}                            
)

install(EXPORT ${PROJECT_NAME}Targets DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})
install(FILES ${CMAKE_CURRENT_LIST_DIR}/${PROJECT_NAME}Config.cmake DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})
